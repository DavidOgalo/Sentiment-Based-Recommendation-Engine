"""Sync with existing schema

Revision ID: 2211152f7359
Revises: 
Create Date: 2025-03-13 15:57:59.779169

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2211152f7359'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users')
    op.drop_index('idx_reviews_provider_id', table_name='reviews')
    op.drop_index('idx_reviews_user_id', table_name='reviews')
    op.drop_table('reviews')
    op.drop_index('idx_services_category', table_name='services')
    op.drop_table('services')
    op.drop_table('user_interactions')
    op.drop_index('idx_providers_location', table_name='service_providers', postgresql_using='gist')
    op.drop_table('service_providers')
    op.drop_table('service_categories')
    op.drop_index('idx_bookings_date', table_name='bookings')
    op.drop_table('bookings')
    op.drop_table('spatial_ref_sys')
    op.drop_table('recommendations')
    op.drop_table('user_preferences')
    op.drop_table('review_sentiment_details')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('review_sentiment_details',
    sa.Column('sentiment_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('review_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('aspect', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('aspect_sentiment_score', sa.NUMERIC(precision=4, scale=3), autoincrement=False, nullable=True),
    sa.Column('keywords', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['review_id'], ['reviews.review_id'], name='review_sentiment_details_review_id_fkey'),
    sa.PrimaryKeyConstraint('sentiment_id', name='review_sentiment_details_pkey')
    )
    op.create_table('user_preferences',
    sa.Column('preference_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('category_preferences', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('price_sensitivity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('distance_preference', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint('distance_preference >= 1 AND distance_preference <= 5', name='user_preferences_distance_preference_check'),
    sa.CheckConstraint('price_sensitivity >= 1 AND price_sensitivity <= 5', name='user_preferences_price_sensitivity_check'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='user_preferences_user_id_fkey'),
    sa.PrimaryKeyConstraint('preference_id', name='user_preferences_pkey')
    )
    op.create_table('recommendations',
    sa.Column('recommendation_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('recommendation_score', sa.NUMERIC(precision=4, scale=3), autoincrement=False, nullable=True),
    sa.Column('recommendation_factors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_clicked', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_booked', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['service_providers.provider_id'], name='recommendations_provider_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='recommendations_user_id_fkey'),
    sa.PrimaryKeyConstraint('recommendation_id', name='recommendations_pkey')
    )
    op.create_table('spatial_ref_sys',
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.CheckConstraint('srid > 0 AND srid <= 998999', name='spatial_ref_sys_srid_check'),
    sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    )
    op.create_table('bookings',
    sa.Column('booking_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('booking_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('booking_time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['service_providers.provider_id'], name='bookings_provider_id_fkey'),
    sa.ForeignKeyConstraint(['service_id'], ['services.service_id'], name='bookings_service_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='bookings_user_id_fkey'),
    sa.PrimaryKeyConstraint('booking_id', name='bookings_pkey')
    )
    op.create_index('idx_bookings_date', 'bookings', ['booking_date'], unique=False)
    op.create_table('service_categories',
    sa.Column('category_id', sa.INTEGER(), server_default=sa.text("nextval('service_categories_category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('category_id', name='service_categories_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('service_providers',
    sa.Column('provider_id', sa.INTEGER(), server_default=sa.text("nextval('service_providers_provider_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('business_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('contact_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.NUMERIC(precision=10, scale=8), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.NUMERIC(precision=11, scale=8), autoincrement=False, nullable=True),
    sa.Column('business_hours', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('services_offered', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('average_rating', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('sentiment_score', sa.NUMERIC(precision=4, scale=3), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_reviews', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='service_providers_user_id_fkey'),
    sa.PrimaryKeyConstraint('provider_id', name='service_providers_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_providers_location', 'service_providers', [sa.literal_column('st_setsrid(st_makepoint(longitude::double precision, latitude::double precision), 4326)')], unique=False, postgresql_using='gist')
    op.create_table('user_interactions',
    sa.Column('interaction_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('interaction_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['service_providers.provider_id'], name='user_interactions_provider_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='user_interactions_user_id_fkey'),
    sa.PrimaryKeyConstraint('interaction_id', name='user_interactions_pkey')
    )
    op.create_table('services',
    sa.Column('service_id', sa.INTEGER(), server_default=sa.text("nextval('services_service_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('price_range', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['service_categories.category_id'], name='services_category_id_fkey'),
    sa.ForeignKeyConstraint(['provider_id'], ['service_providers.provider_id'], name='services_provider_id_fkey'),
    sa.PrimaryKeyConstraint('service_id', name='services_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_services_category', 'services', ['category_id'], unique=False)
    op.create_table('reviews',
    sa.Column('review_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('review_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sentiment_score', sa.NUMERIC(precision=4, scale=3), autoincrement=False, nullable=True),
    sa.Column('sentiment_magnitude', sa.NUMERIC(precision=4, scale=3), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name='reviews_rating_check'),
    sa.ForeignKeyConstraint(['provider_id'], ['service_providers.provider_id'], name='reviews_provider_id_fkey'),
    sa.ForeignKeyConstraint(['service_id'], ['services.service_id'], name='reviews_service_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='reviews_user_id_fkey'),
    sa.PrimaryKeyConstraint('review_id', name='reviews_pkey')
    )
    op.create_index('idx_reviews_user_id', 'reviews', ['user_id'], unique=False)
    op.create_index('idx_reviews_provider_id', 'reviews', ['provider_id'], unique=False)
    op.create_table('users',
    sa.Column('user_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('last_login', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.CheckConstraint("role::text = ANY (ARRAY['customer'::character varying, 'provider'::character varying, 'admin'::character varying]::text[])", name='users_role_check'),
    sa.PrimaryKeyConstraint('user_id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key')
    )
    # ### end Alembic commands ###
